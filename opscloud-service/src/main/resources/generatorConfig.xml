<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 配置生成器 -->
<generatorConfiguration>

    <!-- 引入配置文件 -->
    <properties resource="application.properties"/>

    <context id="default" targetRuntime="MyBatis3Simple" defaultModelType="flat">
        <property name="javaFileEncoding" value="UTF-8"/>
        <property name="mergeable" value="true"/>

        <plugin type="tk.mybatis.mapper.generator.MapperPlugin">
            <property name="mappers" value="tk.mybatis.mapper.common.Mapper"/>
        </plugin>

        <commentGenerator>
            <property name="suppressDate" value="true"/>
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        <!--jdbc的数据库连接 -->
        <jdbcConnection
                driverClass="com.mysql.cj.jdbc.Driver"
                connectionURL="${db.example.url}"
                userId="${db.example.username}"
                password="${db.example.password}">
        </jdbcConnection>

        <!-- java类型处理器
        用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；
        注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型；
        -->

        <!-- java模型创建器，是必须要的元素
            负责：1，key类（见context的defaultModelType）；2，java类；3，查询类
            targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；
            targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录
         -->
        <javaModelGenerator targetPackage="com.baiyi.opscloud.domain.generator.opscloud"
                            targetProject="../opscloud-domain/src/main/java">
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="false"/>

            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="false"/>

            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>

            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="false"/>

            <!-- 生成的类会继承rootClass -->
            <!-- <property name="rootClass" value=""/>-->
        </javaModelGenerator>

        <!-- 生成SQL map的XML文件生成器，
            注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），
                或者只使用Mapper接口+Annotation，
                所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置
            targetPackage/targetProject:同javaModelGenerator
         -->
        <sqlMapGenerator targetPackage="mapper.opscloud" targetProject="../opscloud-service/src/main/resources">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>


        <!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口
            targetPackage/targetProject:同javaModelGenerator
            type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
                1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
                2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
                3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
            注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
        -->
        <javaClientGenerator targetPackage="com.baiyi.opscloud.mapper.opscloud" type="XMLMAPPER"
                             targetProject="../opscloud-service/src/main/java">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素
            tableName（必要）：要生成对象的表名；
            domainObjectName 给表对应的 model 起名字
            注意：大小写敏感问题。
         -->

        <!--
       oc_server_group
       oc_user
       oc_server_group_permission
       oc_server_group_type
       oc_cloudserver
       oc_server
       oc_env
       oc_account
       oc_user_token
       oc_auth_group
       oc_auth_resource
       oc_auth_resource_group
       oc_auth_role
       oc_auth_role_resource
       oc_auth_user_role
       oc_auth_menu
       oc_business_tag
       oc_user_group
       oc_user_permission
       oc_user_credential
       oc_cloud_db
       oc_cloud_db_attribute
       oc_cloud_db_database
       oc_cloud_db_account
       oc_server_attribute
       oc_cloud_image
       oc_cloud_vpc
       oc_cloud_vpc_vswitch
       oc_cloud_vpc_security_group
       oc_cloud_instance_template
       oc_cloud_instance_type
       oc_cloud_instance_template
       oc_cloud_instance_task
       oc_cloud_instance_task_member
       oc_server_task
       oc_server_task_member
       oc_ansible_playbook
       oc_ansible_script
       oc_org_department
       oc_org_department_member
       oc_auth_menu
       oc_workorder_group
       oc_workorder
       oc_workorder_approval_group
       oc_workorder_approval_member
       oc_workorder_ticket
       oc_workorder_ticket_entry
       oc_workorder_ticket_subscribe
       oc_workorder_ticket_flow
       oc_keybox
       oc_document
       oc_user_document
       oc_user_setting
       oc_terminal_session
       oc_terminal_session_instance
       oc_server_change_task
       oc_server_change_task_flow
       oc_server_group_property
       oc_setting
       oc_aliyun_ram_user
       oc_aliyun_ram_policy
       oc_aliyun_ram_permission
       oc_aliyun_log
       oc_aliyun_log_member
       oc_kubernetes_cluster
       oc_kubernetes_cluster_namespace
       oc_kubernetes_deployment
       oc_kubernetes_template
       oc_kubernetes_service
       oc_kubernetes_service_prot
       oc_kubernetes_application
       oc_kubernetes_application_instance
       oc_kubernetes_service
       oc_profile_subscription
       oc_cloud_instance_delete_queue
       oc_dubbo_mapping
       oc_dubbo_mapping_server
       oc_dubbo_tcp_mapping
       oc_dubbo_tcp_mapping_member
       oc_aliyun_ons_instance
       oc_aliyun_ons_topic
       oc_aliyun_ons_group
       oc_aliyun_ons_group_alarm
       oc_dingtalk
       oc_helpdesk_report
       oc_it_asset
       oc_it_asset_name
       oc_it_asset_type
       oc_it_asset_apply
       oc_it_asset_company
       oc_instance
       oc_it_asset_dispose
       oc_aliyun_domain_record
       oc_aliyun_domain
       oc_aliyun_slb
       oc_aliyun_slb_acl
       oc_aliyun_slb_acl_entry
       oc_aliyun_slb_acl_listener
       oc_aliyun_slb_https_listener
       oc_aliyun_slb_listener
       oc_aliyun_slb_sc
       oc_dingtalk_dept
       oc_fault_info
       oc_fault_responsible
       oc_fault_action
       oc_fault_root_cause_type
       oc_announcement
       oc_user_to_be_retired
       oc_menu
       oc_submenu
       oc_role_menu
       oc_export_task
       oc_dingtalk_user_dept
       -->
        <table tableName="oc_aliyun_log_member">
            <generatedKey column="id" sqlStatement="Mysql" identity="true"/>
        </table>

    </context>

</generatorConfiguration>